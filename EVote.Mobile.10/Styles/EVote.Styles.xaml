<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:EVote"
                    xmlns:sys="clr-namespace:System;assembly=System.Runtime">

    <!-- COLORS -->
    <Color x:Key="PrimaryColor">#446CB3</Color>
    <Color x:Key="SecondaryColor">#3A669A</Color>
    <Color x:Key="HighlightColor">#1D508C</Color>
    <Color x:Key="TertiaryColor">#707070</Color>
    <Color x:Key="BackgroundColor">#EEEEEE</Color>
    <Color x:Key="MessageBackgroundColor">White</Color>
    <Color x:Key="ForegroundColor">White</Color>
    <Color x:Key="ModalBackgroundColor">Transparent</Color>
    <Color x:Key="DangerColor">Red</Color>
    <Color x:Key="SuccessColor">Green</Color>
    <Color x:Key="ItemForegroundColor">Black</Color>
    <Color x:Key="ItemHighlightColor">#557DC4</Color>
    <Color x:Key="ItemHighlightSecondaryColor">LightGray</Color>
    <Color x:Key="ItemHighlightForegroundColor">White</Color>
    <Color x:Key="ItemDisabledForegroundColor">Gray</Color>
    <!--<Color x:Key="ItemSelectedColor">#3D26A0DA</Color>-->
    <Color x:Key="ItemSelectedColor">#CECAE0</Color>
    <!--<Color x:Key="ItemSelectedBorderColor">#FF26A0DA</Color>-->
    <Color x:Key="ItemSelectedBorderColor">#FFD8EE</Color>
    <Color x:Key="CheckBoxHoverBorderColor">#7FC4FD</Color>
    <Color x:Key="CheckBoxPressedBorderColor">#446cb3</Color>
    <!-- Color Mixing Tool https://meyerweb.com/eric/tools/color-blend/#:::hex -->

    <!-- BRUSHES -->
    <SolidColorBrush x:Key="ApplicationPrimaryBrush" Color="{StaticResource PrimaryColor}"/>
    <SolidColorBrush x:Key="ApplicationSecondaryBrush" Color="{StaticResource SecondaryColor}"/>
    <SolidColorBrush x:Key="ApplicationHighlightBrush" Color="{StaticResource HighlightColor}"/>
    <SolidColorBrush x:Key="ApplicationTertiaryBrush" Color="{StaticResource TertiaryColor}"/>
    <SolidColorBrush x:Key="ApplicationBackgroundBrush" Color="{StaticResource BackgroundColor}"/>
    <!--<SolidColorBrush x:Key="ApplicationTertiaryBrush" Color="#505062"/>-->
    <!--<SolidColorBrush x:Key="ApplicationBackgroundBrush" Color="#DDF0F0FF"/>-->
    <SolidColorBrush x:Key="ApplicationMessageBackgroundBrush" Color="{StaticResource MessageBackgroundColor}"/>
    <SolidColorBrush x:Key="ApplicationForegroundBrush" Color="{StaticResource ForegroundColor}"/>
    <SolidColorBrush x:Key="ApplicationModalBackgroundBrush" Color="{StaticResource ModalBackgroundColor}"/>
    <SolidColorBrush x:Key="ApplicationDangerBrush" Color="{StaticResource DangerColor}"/>
    <SolidColorBrush x:Key="ApplicationSuccessBrush" Color="{StaticResource SuccessColor}"/>
    <SolidColorBrush x:Key="ApplicationItemForegroundBrush" Color="{StaticResource ItemForegroundColor}"/>
    <SolidColorBrush x:Key="ApplicationItemHighlightBrush" Color="{StaticResource ItemHighlightColor}"/>
    <SolidColorBrush x:Key="ApplicationItemHighlightForegroundBrush" Color="{StaticResource ItemHighlightForegroundColor}"/>
    <SolidColorBrush x:Key="ApplicationItemDisabledForegroundBrush" Color="{StaticResource ItemDisabledForegroundColor}"/>
    <SolidColorBrush x:Key="ApplicationMenuBackgroundBrush" Color="{StaticResource PrimaryColor}" Opacity="0.5"/>

    <!-- FONTS -->
    <!-- https://stackoverflow.com/questions/6453640/how-to-include-external-font-in-wpf-application-without-installing-it -->
    <!-- https://www.codeproject.com/Questions/215387/How-to-Have-all-the-Xaml-window-usercontrols-files -->
    <!-- FontFamily="Verdana, Geneva, sans-serif" Command Center MenuBar -->
    <!-- "Georgia, Times New Roman, Times, serif" Command Center Footer -->
    <!-- "Segoe UI, Semibold"-->
    <Style TargetType="{x:Type Window}">
        <Setter Property="FontFamily" Value="Segoe UI" />
    </Style>
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Segoe UI" />
    </Style>
    <Style TargetType="{x:Type Control}" x:Key="fontStyling">
        <Setter Property="FontFamily" Value="Segoe UI" />
    </Style>
    <Style TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Segoe UI" />
    </Style>
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="FontFamily" Value="Segoe UI" />
    </Style>
    <Style TargetType="{x:Type ListView}">
        <Setter Property="FontFamily" Value="Segoe UI" />
    </Style>

    <!-- LAYOUT SIZES -->
    <sys:Double x:Key="AppHeaderHeight">55</sys:Double>
    <sys:Double x:Key="AppStatusBarHeight">25</sys:Double>
    <!-- CONTROL WIDTHS -->
    <sys:Double x:Key="MenuMaxWidth">200</sys:Double>
    <sys:Double x:Key="MenuButtonHeight">45</sys:Double>
    <sys:Double x:Key="MenuIconWidth">50</sys:Double>
    <sys:Double x:Key="MenuCheckedWidth">9</sys:Double>
    <sys:Double x:Key="MenuIconMaxWidth">50</sys:Double>
    <!-- MUST BE THE SUM OF MenuIconWidth AND MenuCheckedWidth -->
    <sys:Double x:Key="MenuIconHighlightWidth">43</sys:Double>

    <SolidColorBrush x:Key="CheckBoxFillNormal" Color="#F4F4F4"/>
    <SolidColorBrush x:Key="CheckBoxStroke" Color="#8E8F8F"/>
    <Style x:Key="EmptyCheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="1" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CheckRadioFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DROP SHADOW RECTANGLE -->
    <!-- https://stackoverflow.com/questions/38152912/change-listviewitem-background-colour-on-mouse-over -->
    <Style x:Key="FocusVisual"  TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Border BorderThickness="1" CornerRadius="1" BorderBrush="Transparent" Background="{DynamicResource ApplicationItemHighlightBrush}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DropShadowRectangle" TargetType="Rectangle" >
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ListViewItem},
                                       Path=IsMouseOver, 
                                       Mode=OneWay}" 
                     Value="True" >
                <Setter Property="Effect" >
                    <Setter.Value>
                        <DropShadowEffect ShadowDepth="0" Direction="300" 
                                      Opacity=".5" BlurRadius="5" 
                                      Color="Black" />
                    </Setter.Value>
                </Setter>
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="{StaticResource PrimaryColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Fill.Color" />
                            <DoubleAnimation AutoReverse="False"
                                    Duration="0:0:0.4"
                                    From="0"
                                    Storyboard.TargetProperty="(Effect).(DropShadowEffect.ShadowDepth)"
                                    To="5" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="Transparent" Duration="0:0:0.1" Storyboard.TargetProperty="Fill.Color" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>

            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Button},
                                       Path=IsMouseOver, 
                                       Mode=OneWay}" 
                     Value="True" >
                <Setter Property="Effect" >
                    <Setter.Value>
                        <DropShadowEffect ShadowDepth="0" Direction="300" 
                                      Opacity=".5" BlurRadius="5" 
                                      Color="Black" />
                    </Setter.Value>
                </Setter>
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="{StaticResource PrimaryColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Fill.Color" />
                            <DoubleAnimation AutoReverse="False"
                                    Duration="0:0:0.4"
                                    From="0"
                                    Storyboard.TargetProperty="(Effect).(DropShadowEffect.ShadowDepth)"
                                    To="5" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="Transparent" Duration="0:0:0.1" Storyboard.TargetProperty="Fill.Color" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>

            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- BUTTONS -->
    <Style x:Key="ButtonFocusVisual">
        <Setter
            Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="ButtonNormalBackground" Color="#446cb3"/>
    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#446cb3"/>

    <Style x:Key="ModernButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ApplicationPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ApplicationPrimaryBrush}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="BorderThickness" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid >
                        <Rectangle x:Name="Ds" VerticalAlignment="Stretch" Style="{StaticResource DropShadowRectangle}" Fill="White" />
                        <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}" >
                            <Viewbox>
                                <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" />
                            </Viewbox>
                        </Border>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="OpacityMask" Value="#AA888888"/>
                            <Setter Property="Margin" Value="2 1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource HighlightColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation To="{StaticResource ForegroundColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Foreground.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource PrimaryColor}" Duration="0:0:0.05" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation To="{StaticResource ForegroundColor}" Duration="0:0:0.05" Storyboard.TargetProperty="Foreground.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource ApplicationTertiaryBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModernButtonStyleNoStretch" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ApplicationPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ApplicationPrimaryBrush}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="BorderThickness" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid >
                        <Rectangle x:Name="Ds" VerticalAlignment="Stretch" Style="{StaticResource DropShadowRectangle}" Fill="White" />
                        <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                CornerRadius="5" >
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="OpacityMask" Value="#AA888888"/>
                            <Setter Property="Margin" Value="2 1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource HighlightColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation To="{StaticResource ForegroundColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Foreground.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource PrimaryColor}" Duration="0:0:0.05" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation To="{StaticResource ForegroundColor}" Duration="0:0:0.05" Storyboard.TargetProperty="Foreground.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource ApplicationTertiaryBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModernButtonStyleNoStretchWhite" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ApplicationMessageBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="BorderThickness" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid >
                        <Rectangle x:Name="Ds" VerticalAlignment="Stretch" Style="{StaticResource DropShadowRectangle}" Fill="White" />
                        <Border
                                x:Name="Border"
                                BorderThickness="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}" >
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="OpacityMask" Value="#AA888888"/>
                            <Setter Property="Margin" Value="2 1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource ItemHighlightSecondaryColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation To="{StaticResource ItemForegroundColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Foreground.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource MessageBackgroundColor}" Duration="0:0:0.05" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation To="{StaticResource ItemForegroundColor}" Duration="0:0:0.05" Storyboard.TargetProperty="Foreground.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource ApplicationHighlightBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModernButtonStyleNoStretchGreen" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ApplicationSuccessBrush}"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="BorderThickness" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid >
                        <Rectangle x:Name="Ds" VerticalAlignment="Stretch" Style="{StaticResource DropShadowRectangle}" Fill="White" />
                        <Border
                                x:Name="Border"
                                BorderThickness="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                CornerRadius="5" >
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="OpacityMask" Value="#AA888888"/>
                            <Setter Property="Margin" Value="2 1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource ItemHighlightSecondaryColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation To="{StaticResource ItemForegroundColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Foreground.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource SuccessColor}" Duration="0:0:0.05" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation To="White" Duration="0:0:0.05" Storyboard.TargetProperty="Foreground.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource ApplicationHighlightBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModernButtonStyleNoStretchRed" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ApplicationDangerBrush}"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="BorderThickness" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid >
                        <Rectangle x:Name="Ds" VerticalAlignment="Stretch" Style="{StaticResource DropShadowRectangle}" Fill="White" />
                        <Border
                                x:Name="Border"
                                BorderThickness="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                CornerRadius="5">
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="OpacityMask" Value="#AA888888"/>
                            <Setter Property="Margin" Value="2 1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource ItemHighlightSecondaryColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation To="{StaticResource ItemForegroundColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Foreground.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource DangerColor}" Duration="0:0:0.05" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation To="White" Duration="0:0:0.05" Storyboard.TargetProperty="Foreground.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource ApplicationHighlightBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModernButtonStyleNoStretchPrimary" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ApplicationPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="BorderThickness" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid >
                        <Rectangle x:Name="Ds" VerticalAlignment="Stretch" Style="{StaticResource DropShadowRectangle}" Fill="White" />
                        <Border
                                x:Name="Border"
                                BorderThickness="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}" >
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="OpacityMask" Value="#AA888888"/>
                            <Setter Property="Margin" Value="2 1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource ItemHighlightSecondaryColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation To="{StaticResource ItemForegroundColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Foreground.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource PrimaryColor}" Duration="0:0:0.05" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation To="White" Duration="0:0:0.05" Storyboard.TargetProperty="Foreground.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource ApplicationHighlightBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModernHiddenButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ApplicationPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ApplicationPrimaryBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ApplicationForegroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0 0"/>
        <Setter Property="BorderThickness" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0,1,1,0">

                        </Border>
                        <Viewbox>
                            <ContentPresenter
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    Margin="{TemplateBinding Padding}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    RecognizesAccessKey="True" />
                        </Viewbox>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="OpacityMask" Value="#AA888888"/>
                            <Setter Property="Margin" Value="2 1" />
                            <Setter Property="Button.Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="Black" Direction="320" ShadowDepth="1" BlurRadius="2" Opacity="0.5" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Background" Value="{DynamicResource ApplicationHighlightBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ApplicationForegroundBrush}"/>
                            <Setter Property="Cursor" Value="Hand"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource ApplicationTertiaryBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModernHiddenExitButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ApplicationPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ApplicationPrimaryBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ApplicationForegroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0 0"/>
        <Setter Property="BorderThickness" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0,1,1,0">
                        </Border>
                        <Viewbox>
                            <ContentPresenter
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    Margin="{TemplateBinding Padding}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    RecognizesAccessKey="True" />
                        </Viewbox>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="OpacityMask" Value="#AA888888"/>
                            <Setter Property="Margin" Value="2 1" />
                            <!--<Setter Property="Button.Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="Black" Direction="320" ShadowDepth="1" BlurRadius="2" Opacity="0.5" />
                                </Setter.Value>
                            </Setter>-->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Background" Value="{DynamicResource ApplicationDangerBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ApplicationForegroundBrush}"/>
                            <Setter Property="Cursor" Value="Hand"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource ApplicationTertiaryBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModernMenuButtonStyle" TargetType="Button" >
        <Setter Property="Background" Value="{StaticResource ApplicationHighlightBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ApplicationForegroundBrush}" />
        <Setter Property="Padding" Value="10 5" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="GridMain" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{Binding Source={StaticResource MenuIconHighlightWidth}}"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Grid Grid.Column="0">
                            <ContentPresenter                                
                                Content="{TemplateBinding Content}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" />
                        </Grid>

                        <ContentPresenter
                            Grid.Column="2"
                            Content="{TemplateBinding Tag}"
                            HorizontalAlignment="Left"
                            Margin="9,0,0,0"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="{StaticResource SecondaryColor}" Duration="0:0:0.4" Storyboard.TargetProperty="Background.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="{StaticResource HighlightColor}" Duration="0:0:0.2" Storyboard.TargetProperty="Background.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ModernMenuRadioButtonStyle" TargetType="RadioButton" >
        <Setter Property="Background" Value="{StaticResource ApplicationHighlightBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ApplicationForegroundBrush}" />
        <Setter Property="Padding" Value="10 5" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Grid x:Name="GridMain" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{Binding Source={StaticResource MenuIconHighlightWidth}}"/>
                            <!--<ColumnDefinition Width="Auto"/>-->
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <!--<TextBlock Grid.Column="0" Text=" "
                                Padding="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>-->

                        <Grid x:Name="CheckedBar" Grid.Column="0">
                            <ContentPresenter                                
                                Content="{TemplateBinding Content}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" />
                        </Grid>

                        <ContentPresenter
                            Grid.Column="2"
                            Content="{TemplateBinding Tag}"
                            HorizontalAlignment="Left"
                            Margin="9,0,0,0"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <!--<Setter Property="Background" Value="{StaticResource ApplicationSecondaryBrush}" TargetName="GridMain" />-->
                            <Setter Property="Background" Value="{StaticResource ApplicationPrimaryBrush}" TargetName="CheckedBar" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="{StaticResource SecondaryColor}" Duration="0:0:0.4" Storyboard.TargetProperty="Background.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="{StaticResource HighlightColor}" Duration="0:0:0.2" Storyboard.TargetProperty="Background.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="{StaticResource SecondaryColor}" Duration="0:0:0.4" Storyboard.TargetProperty="Background.Color"/>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="{StaticResource HighlightColor}" Duration="0:0:0.2" Storyboard.TargetProperty="Background.Color"/>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LinkButton" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock TextDecorations="None">
                        <ContentPresenter />
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="Gray" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="#446CB3" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <TextBlock TextDecorations="Underline">
                                <ContentPresenter />
                            </TextBlock>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#446CB3" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <TextBlock TextDecorations="Underline">
                                <ContentPresenter />
                            </TextBlock>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- DROP DOWN LIST -->
    <SolidColorBrush x:Key="ComboBoxNormalBorderBrush" Color="{StaticResource PrimaryColor}" />
    <SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="{StaticResource MessageBackgroundColor}" />
    <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="{StaticResource ItemDisabledForegroundColor}" />
    <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="{StaticResource MessageBackgroundColor}" />
    <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="{StaticResource ItemDisabledForegroundColor}" />
    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Black"/>

    <ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="2" Name="Border"
              BorderBrush="{StaticResource ComboBoxNormalBorderBrush}" 
              CornerRadius="0" BorderThickness="1, 1, 1, 1" 
              Background="{StaticResource ComboBoxNormalBackgroundBrush}" />
            <Border Grid.Column="1" Margin="1, 1, 1, 1" BorderBrush="#444444" Name="ButtonBorder"
              CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0" 
              Background="{StaticResource ComboBoxNormalBackgroundBrush}" />

            <Path Name="Arrow" Grid.Column="1" 
            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
            HorizontalAlignment="Center" Fill="#444444"
            VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ApplicationPrimaryBrush}"/>
                <Setter Property="BorderBrush" TargetName="Border" Value="{StaticResource ApplicationPrimaryBrush}"/>
                <Setter Property="BorderThickness" TargetName="Border" Value="1,1,2,2"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{DynamicResource ApplicationPrimaryBrush}"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="White"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"/>
                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#999"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ComboBoxFlatStyle"  TargetType="{x:Type ComboBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="Black"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton" Grid.Column="2"
                ClickMode="Press" Focusable="False"
                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                Template="{StaticResource ComboBoxToggleButtonTemplate}"/>
                        <ContentPresenter Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="False"                                          
                                  HorizontalAlignment="Left" VerticalAlignment="Center"                              
                                  Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                                  ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                        <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3"                     
                     IsReadOnly="{TemplateBinding IsReadOnly}"
                     Visibility="Hidden" Background="Transparent"
                     HorizontalAlignment="Left" VerticalAlignment="Center"
                     Focusable="True" >
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox" >
                                    <Border Name="PART_ContentHost" Focusable="False" />
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        <!-- Popup showing items -->
                        <Popup Name="Popup" Placement="Bottom"
                   Focusable="False" AllowsTransparency="True"
                   IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                   PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True"
                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                <Border Name="DropDownBorder" Background="{StaticResource ApplicationBackgroundBrush}" Margin="0, 1, 0, 0"
                        CornerRadius="0" BorderThickness="1,1,1,1" 
                        BorderBrush="{StaticResource ComboBoxNormalBorderBrush}" >
                                    <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                            <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxFlatStyleStretch"  TargetType="{x:Type ComboBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="Black"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton" Grid.Column="2"
                ClickMode="Press" Focusable="False"
                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                Template="{StaticResource ComboBoxToggleButtonTemplate}"/>
                        <Viewbox Stretch="Uniform" HorizontalAlignment="Left" >
                            <ContentPresenter Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="False"                                          
                                  HorizontalAlignment="Left" VerticalAlignment="Center"                              
                                  Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                                  ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                        </Viewbox>
                        <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3"                     
                     IsReadOnly="{TemplateBinding IsReadOnly}"
                     Visibility="Hidden" Background="Transparent"
                     HorizontalAlignment="Left" VerticalAlignment="Center"
                     Focusable="True" >
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox" >
                                    <Border Name="PART_ContentHost" Focusable="False" />
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        <!-- Popup showing items -->
                        <Popup Name="Popup" Placement="Bottom"
                   Focusable="False" AllowsTransparency="True"
                   IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                   PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True"
                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}" >
                                <Border Name="DropDownBorder" Background="{StaticResource ApplicationBackgroundBrush}" Margin="0, 1, 0, 0"
                        CornerRadius="0" BorderThickness="1,1,1,1" 
                        BorderBrush="{StaticResource ComboBoxNormalBorderBrush}" >
                                    <ScrollViewer Margin="4" SnapsToDevicePixels="True" >
                                        <!--<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />-->
                                        <!--<Grid >-->
                                        <!--<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />-->
                                        <Viewbox Stretch="Uniform" HorizontalAlignment="Left">
                                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </Viewbox>
                                        <!--</Grid>-->
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="125"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                            <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RADIO BUTTONS -->
    <!-- https://stopbyte.com/t/how-to-make-wpf-radiobutton-style/131 -->
    <Style x:Key="ModernRadioButtonStyle32"  TargetType="{x:Type RadioButton}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent" Cursor="Hand">
                        <BulletDecorator.Bullet>
                            <Grid Height="15" Width="15">
                                <!--Define size of the Bullet-->
                                <!--The two borders-->
                                <Border Name="RadioOuter" Background="Transparent" BorderBrush="{DynamicResource ApplicationPrimaryBrush}" BorderThickness="2" CornerRadius="8" />
                                <Border CornerRadius="6" Margin="4" Name="RadioMark" Background="{StaticResource ApplicationSuccessBrush}" Visibility="Hidden" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <!--Text element-->
                        <TextBlock Margin="5,0,0,0" Foreground="{DynamicResource ApplicationPrimaryBrush}">
                        <ContentPresenter />
                        </TextBlock>
                    </BulletDecorator>
                    <!--If item is checked, trigger the visibility of the mark-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <!--If item is checked, trigger the visibility of the mark and change the color of the selected bullet into a darker gray for better highlighting-->
                            <Setter TargetName="RadioMark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="RadioOuter" Property="BorderBrush" Value="{DynamicResource ApplicationPrimaryBrush}" />
                            <Setter TargetName="RadioOuter" Property="BorderThickness" Value="2" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="RadioOuter" Property="BorderThickness" Value="3" />
                            <Setter TargetName="RadioMark" Property="Margin" Value="5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- LIST VIEWS -->
    <SolidColorBrush x:Key="Item.MouseOver.Background" Color="{StaticResource ItemHighlightColor}"/>
    <SolidColorBrush x:Key="Item.MouseOver.Border" Color="{StaticResource ItemHighlightColor}"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="{StaticResource BackgroundColor}"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="{StaticResource BackgroundColor}"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="{StaticResource ItemSelectedColor}"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="{StaticResource ItemSelectedBorderColor}"/>
    <Style x:Key="ListViewContainerStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Foreground" Value="{StaticResource ApplicationItemForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource ApplicationBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ApplicationBackgroundBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid Margin="5">
                        <Rectangle x:Name="Ds" VerticalAlignment="Stretch" Style="{StaticResource DropShadowRectangle}" Fill="White" />
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource PrimaryColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation To="{StaticResource ItemHighlightForegroundColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Foreground.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation To="{StaticResource BackgroundColor}" Duration="0:0:0.05" Storyboard.TargetProperty="Background.Color" />
                                        <ColorAnimation To="{StaticResource ItemForegroundColor}" Duration="0:0:0.05" Storyboard.TargetProperty="Foreground.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- CHECKBOXES -->
    <Style x:Key="CheckBoxStyleLarge" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="{StaticResource CheckBoxFillNormal}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
                                    Width="32"
                                    Height="32"
                                    CornerRadius="3"
                                    Margin="0,2,0,0"
                                    BorderThickness="2">

                                <Border.BorderBrush>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="{StaticResource PrimaryColor}" Offset="0.0" />
                                                <GradientStop Color="{StaticResource PrimaryColor}" Offset="1.0" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.BorderBrush>

                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="{StaticResource MessageBackgroundColor}" />
                                                <GradientStop Color="{StaticResource MessageBackgroundColor}" Offset="1.0" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Grid>
                                    <Path Visibility="Collapsed"
                                            Width="30"
                                            Height="30"
                                            x:Name="CheckMark"
                                            SnapsToDevicePixels="False"
                                            StrokeThickness="4"
                                            Data="M 5 13 L 14 21 M 13 21 L 24 7" Stroke="{StaticResource ApplicationSuccessBrush}"/>
                                    <Path Visibility="Collapsed"
                                            Width="30"
                                            Height="30"
                                            x:Name="InderminateMark"
                                            SnapsToDevicePixels="False"
                                            StrokeThickness="3"
                                            Data="M 0 7 L 7 0" Stroke="{StaticResource ApplicationItemDisabledForegroundBrush}"/>
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource CheckBoxHoverBorderColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource MessageBackgroundColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource CheckBoxPressedBorderColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource CheckBoxPressedBorderColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="CheckMark">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="InderminateMark">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxStyleLarge32" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="{StaticResource CheckBoxFillNormal}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
                                    Width="32"
                                    Height="32"
                                    CornerRadius="3"
                                    Margin="0,2,0,0"
                                    BorderThickness="2">

                                <Border.BorderBrush>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="#7FC4FD" Offset="0.0" />
                                                <GradientStop Color="#7FC4FD" Offset="1.0" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.BorderBrush>

                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="White" />
                                                <GradientStop Color="White" Offset="1.0" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Grid>
                                    <Path Visibility="Collapsed"
                                            Width="30"
                                            Height="30"
                                            x:Name="CheckMark"
                                            SnapsToDevicePixels="False"
                                            StrokeThickness="4"
                                            Data="M 5 13 L 14 21 M 13 21 L 24 7" Stroke="Green"/>
                                    <Path Visibility="Collapsed"
                                            Width="30"
                                            Height="30"
                                            x:Name="InderminateMark"
                                            SnapsToDevicePixels="False"
                                            StrokeThickness="3"
                                            Data="M 0 7 L 7 0" Stroke="Gray"/>
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="#7FC4FD" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="White" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="#446cb3" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="#446cb3" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="CheckMark">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="InderminateMark">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>